basePath: /
definitions:
  core.APIResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
      timestamp:
        type: string
    type: object
  core.BranchRequest:
    properties:
      address:
        type: string
      city:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      phone:
        type: string
      province:
        type: string
    required:
    - address
    - city
    - latitude
    - longitude
    - name
    - phone
    - province
    type: object
  core.CancelSubscriptionRequest:
    properties:
      reason:
        type: string
    type: object
  core.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 6
        type: string
    required:
    - current_password
    - new_password
    type: object
  core.ChatMessageRequest:
    properties:
      message:
        type: string
      order_id:
        type: string
      receiver_id:
        type: string
    required:
    - message
    - order_id
    - receiver_id
    type: object
  core.ErrorResponse:
    properties:
      details: {}
      error:
        type: string
      message:
        type: string
      status:
        type: string
      timestamp:
        type: string
    type: object
  core.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  core.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  core.MembershipRequest:
    properties:
      auto_renew:
        type: boolean
      status:
        allOf:
        - $ref: '#/definitions/core.MembershipStatus'
        enum:
        - active
        - expired
        - suspended
        - cancelled
        - trial
      subscription_type:
        allOf:
        - $ref: '#/definitions/core.SubscriptionType'
        enum:
        - monthly
        - yearly
      tier:
        allOf:
        - $ref: '#/definitions/core.MembershipTier'
        enum:
        - basic
        - premium
        - vip
        - elite
    required:
    - subscription_type
    - tier
    type: object
  core.MembershipStatus:
    enum:
    - active
    - expired
    - suspended
    - cancelled
    - trial
    type: string
    x-enum-varnames:
    - MembershipStatusActive
    - MembershipStatusExpired
    - MembershipStatusSuspended
    - MembershipStatusCancelled
    - MembershipStatusTrial
  core.MembershipTier:
    enum:
    - basic
    - premium
    - vip
    - elite
    type: string
    x-enum-varnames:
    - MembershipTierBasic
    - MembershipTierPremium
    - MembershipTierVIP
    - MembershipTierElite
  core.MidtransPaymentRequest:
    properties:
      amount:
        type: number
      customer_email:
        type: string
      customer_phone:
        type: string
      order_id:
        type: string
    required:
    - amount
    - customer_email
    - customer_phone
    - order_id
    type: object
  core.NotificationRequest:
    properties:
      message:
        type: string
      order_id:
        type: string
      title:
        type: string
      type:
        $ref: '#/definitions/core.NotificationType'
      user_id:
        type: string
    required:
    - message
    - title
    - type
    - user_id
    type: object
  core.NotificationType:
    enum:
    - email
    - whatsapp
    - push
    - sms
    - order_update
    - order_ready
    - order_delivered
    - order_completed
    - order_cancelled
    - payment_pending
    - payment_received
    - payment_failed
    - payment_cancelled
    - payment_refunded
    - payment_update
    - welcome
    - promotion
    - system
    type: string
    x-enum-varnames:
    - NotificationTypeEmail
    - NotificationTypeWhatsApp
    - NotificationTypePush
    - NotificationTypeSMS
    - NotificationTypeOrderUpdate
    - NotificationTypeOrderReady
    - NotificationTypeOrderDelivered
    - NotificationTypeOrderCompleted
    - NotificationTypeOrderCancelled
    - NotificationTypePaymentPending
    - NotificationTypePaymentReceived
    - NotificationTypePaymentFailed
    - NotificationTypePaymentCancelled
    - NotificationTypePaymentRefunded
    - NotificationTypePaymentUpdate
    - NotificationTypeWelcome
    - NotificationTypePromotion
    - NotificationTypeSystem
  core.OrderStatus:
    enum:
    - pending_pickup
    - on_pickup
    - in_service
    - ready
    - delivered
    - completed
    - cancelled
    type: string
    x-enum-varnames:
    - StatusPendingPickup
    - StatusOnPickup
    - StatusInService
    - StatusReady
    - StatusDelivered
    - StatusCompleted
    - StatusCancelled
  core.PaginatedResponse:
    properties:
      data: {}
      message:
        type: string
      pagination:
        $ref: '#/definitions/core.PaginationResponse'
      status:
        type: string
      timestamp:
        type: string
    type: object
  core.PaginationResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  core.PaymentMethod:
    enum:
    - cash
    - midtrans
    - gopay
    - qris
    - qris
    - transfer
    - bank_transfer
    - mandiri_echannel
    type: string
    x-enum-comments:
      PaymentMethodQris: Alias for QRIS
    x-enum-descriptions:
    - ""
    - ""
    - ""
    - ""
    - Alias for QRIS
    - ""
    - ""
    - ""
    x-enum-varnames:
    - PaymentMethodCash
    - PaymentMethodMidtrans
    - PaymentMethodGopay
    - PaymentMethodQRIS
    - PaymentMethodQris
    - PaymentMethodTransfer
    - PaymentMethodBankTransfer
    - PaymentMethodMandiriEchannel
  core.PaymentRequest:
    properties:
      amount:
        type: number
      notes:
        type: string
      order_id:
        type: string
      payment_method:
        $ref: '#/definitions/core.PaymentMethod'
    required:
    - amount
    - order_id
    - payment_method
    type: object
  core.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  core.ResetPasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  core.ServiceOrderRequest:
    properties:
      branch_id:
        type: string
      complaint:
        type: string
      description:
        type: string
      estimated_cost:
        type: number
      estimated_duration:
        type: integer
      iphone_color:
        type: string
      iphone_imei:
        type: string
      iphone_model:
        type: string
      iphone_type:
        type: string
      pickup_address:
        type: string
      pickup_latitude:
        type: number
      pickup_location:
        type: string
      pickup_longitude:
        type: number
      service_type:
        $ref: '#/definitions/core.ServiceType'
    required:
    - branch_id
    - complaint
    - description
    - iphone_color
    - iphone_imei
    - iphone_model
    - iphone_type
    - pickup_address
    - pickup_latitude
    - pickup_location
    - pickup_longitude
    - service_type
    type: object
  core.ServiceType:
    enum:
    - screen_repair
    - battery_replacement
    - water_damage
    - software_issue
    - hardware_repair
    - other
    type: string
    x-enum-varnames:
    - ServiceTypeScreenRepair
    - ServiceTypeBatteryReplacement
    - ServiceTypeWaterDamage
    - ServiceTypeSoftwareIssue
    - ServiceTypeHardwareRepair
    - ServiceTypeOther
  core.SubscriptionRequest:
    properties:
      auto_renew:
        type: boolean
      payment_method:
        type: string
      subscription_type:
        allOf:
        - $ref: '#/definitions/core.SubscriptionType'
        enum:
        - monthly
        - yearly
      tier:
        allOf:
        - $ref: '#/definitions/core.MembershipTier'
        enum:
        - basic
        - premium
        - vip
        - elite
    required:
    - payment_method
    - subscription_type
    - tier
    type: object
  core.SubscriptionType:
    enum:
    - monthly
    - yearly
    type: string
    x-enum-varnames:
    - SubscriptionTypeMonthly
    - SubscriptionTypeYearly
  core.UpdateOrderStatusRequest:
    properties:
      notes:
        type: string
      status:
        $ref: '#/definitions/core.OrderStatus'
    required:
    - status
    type: object
  core.UserRequest:
    properties:
      branch_id:
        type: string
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/core.UserRole'
    required:
    - email
    - full_name
    - password
    - phone
    - role
    type: object
  core.UserRole:
    enum:
    - admin_pusat
    - admin_cabang
    - kasir
    - teknisi
    - kurir
    - pelanggan
    - central_admin
    - branch_admin
    - cashier
    - technician
    - courier
    - customer
    type: string
    x-enum-varnames:
    - RoleAdminPusat
    - RoleAdminCabang
    - RoleKasir
    - RoleTeknisi
    - RoleKurir
    - RolePelanggan
host: localhost:8080
info:
  contact:
    email: support@iphoneservice.com
    name: iPhone Service API Support
    url: https://iphoneservice.com
  description: Backend API for iPhone Service Point of Sales system supporting 50
    branches across Indonesia
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: iPhone Service POS API
  version: "1.0"
paths:
  /admin/orders:
    get:
      consumes:
      - application/json
      description: Get all orders with pagination and filters (Admin only)
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Order status filter
        in: query
        name: status
        type: string
      - description: Branch ID filter
        in: query
        name: branch_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all orders (Admin)
      tags:
      - orders
  /admin/orders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an order (Admin only)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete order (Admin)
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Update order information (Admin only)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.ServiceOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update order (Admin)
      tags:
      - orders
  /admin/users:
    get:
      consumes:
      - application/json
      description: List users with pagination and filters (admin only)
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by role
        in: query
        name: role
        type: string
      - description: Filter by branch ID
        in: query
        name: branch_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get users (admin)
      tags:
      - users
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user (admin)
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user by ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user (admin)
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user by ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user (admin)
      tags:
      - users
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change current user password
      parameters:
      - description: Password change data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - auth
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Initiate password reset process
      parameters:
      - description: Forgot password data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Forgot password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/profile:
    get:
      consumes:
      - application/json
      description: Get current user profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
    put:
      consumes:
      - application/json
      description: Update current user profile information
      parameters:
      - description: Profile update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset password using reset token
      parameters:
      - description: Reset password data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Reset password
      tags:
      - auth
  /branches:
    get:
      consumes:
      - application/json
      description: Get all branches with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Get all branches
      tags:
      - branches
    post:
      consumes:
      - application/json
      description: Create a new branch/outlet
      parameters:
      - description: Branch data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.BranchRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new branch
      tags:
      - branches
  /branches/{branch_id}/orders:
    get:
      consumes:
      - application/json
      description: Get orders for a specific branch
      parameters:
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get branch orders
      tags:
      - orders
  /branches/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete a branch
      parameters:
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete branch
      tags:
      - branches
    get:
      consumes:
      - application/json
      description: Get branch details by ID
      parameters:
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Get branch by ID
      tags:
      - branches
    put:
      consumes:
      - application/json
      description: Update branch information
      parameters:
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      - description: Branch update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.BranchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update branch
      tags:
      - branches
  /branches/active:
    get:
      consumes:
      - application/json
      description: Get all active branches
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Get active branches
      tags:
      - branches
  /branches/nearby:
    get:
      consumes:
      - application/json
      description: Get branches within a certain radius from given coordinates
      parameters:
      - description: Latitude
        in: query
        name: latitude
        required: true
        type: number
      - description: Longitude
        in: query
        name: longitude
        required: true
        type: number
      - default: 10
        description: Radius in kilometers
        in: query
        name: radius
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Get nearby branches
      tags:
      - branches
  /branches/nearest:
    get:
      consumes:
      - application/json
      description: Get nearest branches based on location
      parameters:
      - description: Latitude
        format: float64
        in: query
        name: lat
        required: true
        type: number
      - description: Longitude
        format: float64
        in: query
        name: lon
        required: true
        type: number
      - default: 10
        description: Search radius in km
        format: float64
        in: query
        name: radius
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Get nearest branches
      tags:
      - branches
  /cashier/orders:
    get:
      consumes:
      - application/json
      description: Get orders assigned to cashier
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get cashier orders
      tags:
      - orders
  /chat/conversations:
    get:
      consumes:
      - application/json
      description: Get all chat conversations for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user chats
      tags:
      - chat
  /chat/messages:
    post:
      consumes:
      - application/json
      description: Send a chat message in an order conversation
      parameters:
      - description: Chat message data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.ChatMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Send chat message
      tags:
      - chat
  /chat/messages/{id}/read:
    put:
      consumes:
      - application/json
      description: Mark a chat message as read
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Mark message as read
      tags:
      - chat
  /chat/orders/{orderId}/messages:
    get:
      consumes:
      - application/json
      description: Get chat messages for an order
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Get chat messages
      tags:
      - chat
  /chat/orders/{orderId}/read:
    put:
      consumes:
      - application/json
      description: Mark all messages in an order as read for the current user
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Mark order messages as read
      tags:
      - chat
  /chat/unread-count:
    get:
      consumes:
      - application/json
      description: Get the count of unread messages for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get unread message count
      tags:
      - chat
  /courier/jobs:
    get:
      consumes:
      - application/json
      description: Get available jobs for couriers
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get available jobs
      tags:
      - orders
  /courier/jobs/{id}/accept:
    post:
      consumes:
      - application/json
      description: Accept a job as courier
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Accept job
      tags:
      - orders
  /courier/orders:
    get:
      consumes:
      - application/json
      description: Get orders assigned to courier
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get courier orders
      tags:
      - orders
  /dashboard/branches/{branchId}/stats:
    get:
      consumes:
      - application/json
      description: Get statistics for a specific branch
      parameters:
      - description: Branch ID
        in: path
        name: branchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get branch statistics
      tags:
      - dashboard
  /dashboard/orders:
    get:
      consumes:
      - application/json
      description: Get order related statistics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Order statistics
      tags:
      - dashboard
  /dashboard/overview:
    get:
      consumes:
      - application/json
      description: Get overview statistics for dashboard
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Dashboard overview
      tags:
      - dashboard
  /dashboard/popular-services:
    get:
      consumes:
      - application/json
      description: Get most popular service types
      parameters:
      - default: 5
        description: Number of services to return
        in: query
        name: limit
        type: integer
      - description: Branch ID (for admin users)
        in: query
        name: branch_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get popular services
      tags:
      - dashboard
  /dashboard/revenue:
    get:
      consumes:
      - application/json
      description: Get revenue related statistics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Revenue statistics
      tags:
      - dashboard
  /dashboard/revenue-report:
    get:
      consumes:
      - application/json
      description: Get revenue report for a date range
      parameters:
      - description: Branch ID (for admin users)
        in: query
        name: branch_id
        type: string
      - description: Start date (YYYY-MM-DD)
        in: query
        name: date_from
        required: true
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: date_to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get revenue report
      tags:
      - dashboard
  /dashboard/service-stats:
    get:
      consumes:
      - application/json
      description: Get service type statistics
      parameters:
      - description: Branch ID (for admin users)
        in: query
        name: branch_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get service statistics
      tags:
      - dashboard
  /dashboard/stats:
    get:
      consumes:
      - application/json
      description: Get dashboard statistics for the current user
      parameters:
      - description: Branch ID (for admin users)
        in: query
        name: branch_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get dashboard statistics
      tags:
      - dashboard
  /dashboard/users/{userId}/stats:
    get:
      consumes:
      - application/json
      description: Get statistics for a specific user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user statistics
      tags:
      - dashboard
  /files/delete:
    delete:
      consumes:
      - application/json
      description: Delete a file from storage
      parameters:
      - description: Object name
        in: query
        name: object_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete file
      tags:
      - files
  /files/list:
    get:
      consumes:
      - application/json
      description: List files in a folder
      parameters:
      - description: Folder name
        in: query
        name: folder
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List files
      tags:
      - files
  /files/orders/photo:
    post:
      consumes:
      - multipart/form-data
      description: Upload a photo for an order (pickup, service, or delivery)
      parameters:
      - description: Photo file
        in: formData
        name: file
        required: true
        type: file
      - description: Order ID
        in: formData
        name: order_id
        required: true
        type: string
      - description: Photo type (pickup, service, delivery)
        in: formData
        name: photo_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload order photo
      tags:
      - files
  /files/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file to storage
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Folder name
        in: formData
        name: folder
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload file
      tags:
      - files
  /files/url:
    get:
      consumes:
      - application/json
      description: Get a presigned URL for file access
      parameters:
      - description: Object name
        in: query
        name: object_name
        required: true
        type: string
      - default: 60
        description: Expiry in minutes
        in: query
        name: expiry
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get file URL
      tags:
      - files
  /files/users/avatar:
    post:
      consumes:
      - multipart/form-data
      description: Upload a user avatar
      parameters:
      - description: Avatar file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload user avatar
      tags:
      - files
  /health:
    get:
      consumes:
      - application/json
      description: Check the health of the application and its dependencies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Health check
      tags:
      - health
  /health/live:
    get:
      consumes:
      - application/json
      description: Check if the application is alive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
      summary: Liveness check
      tags:
      - health
  /health/metrics:
    get:
      consumes:
      - application/json
      description: Get application metrics and statistics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Application metrics
      tags:
      - health
  /health/ready:
    get:
      consumes:
      - application/json
      description: Check if the application is ready to serve requests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Readiness check
      tags:
      - health
  /membership:
    get:
      consumes:
      - application/json
      description: Get membership details for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user membership
      tags:
      - membership
    post:
      consumes:
      - application/json
      description: Create a new membership for a user
      parameters:
      - description: Membership data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.MembershipRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new membership
      tags:
      - membership
    put:
      consumes:
      - application/json
      description: Update membership tier or status
      parameters:
      - description: Membership update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.MembershipRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update membership
      tags:
      - membership
  /membership/cancel:
    post:
      consumes:
      - application/json
      description: Cancel user's membership subscription
      parameters:
      - description: Cancel subscription data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.CancelSubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cancel subscription
      tags:
      - membership
  /membership/list:
    get:
      consumes:
      - application/json
      description: Get list of memberships with pagination and filters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by tier
        in: query
        name: tier
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List memberships
      tags:
      - membership
  /membership/redeem-points:
    post:
      consumes:
      - application/json
      description: Redeem membership points for discount
      parameters:
      - description: Points to redeem
        in: query
        name: points
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Redeem membership points
      tags:
      - membership
  /membership/stats:
    get:
      consumes:
      - application/json
      description: Get membership statistics and analytics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get membership statistics
      tags:
      - membership
  /membership/subscribe:
    post:
      consumes:
      - application/json
      description: Subscribe to a membership tier with payment
      parameters:
      - description: Subscription data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.SubscriptionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Subscribe to membership
      tags:
      - membership
  /membership/tiers:
    get:
      consumes:
      - application/json
      description: Get all available membership tiers and their benefits
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
      summary: Get membership tiers
      tags:
      - membership
  /membership/top-spenders:
    get:
      consumes:
      - application/json
      description: Get list of top spending members
      parameters:
      - default: 10
        description: Number of top spenders
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get top spending members
      tags:
      - membership
  /membership/trial:
    post:
      consumes:
      - application/json
      description: Start a 7-day trial membership
      parameters:
      - description: Membership tier
        enum:
        - basic
        - premium
        - vip
        - elite
        in: query
        name: tier
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Start trial membership
      tags:
      - membership
  /membership/upgrade:
    post:
      consumes:
      - application/json
      description: Upgrade user's membership to a higher tier
      parameters:
      - description: New membership tier
        enum:
        - basic
        - premium
        - vip
        - elite
        in: query
        name: tier
        required: true
        type: string
      - description: Subscription type
        enum:
        - monthly
        - yearly
        in: query
        name: subscription_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upgrade membership
      tags:
      - membership
  /membership/usage:
    get:
      consumes:
      - application/json
      description: Get current month usage for membership benefits
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get membership usage
      tags:
      - membership
  /notifications:
    get:
      consumes:
      - application/json
      description: Get notifications for the current user
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.PaginatedResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user notifications
      tags:
      - notifications
    post:
      consumes:
      - application/json
      description: Send a notification to a user
      parameters:
      - description: Notification data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.NotificationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Send notification
      tags:
      - notifications
  /notifications/{id}/read:
    put:
      consumes:
      - application/json
      description: Mark a notification as read
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Mark notification as read
      tags:
      - notifications
  /notifications/order/{orderId}/payment:
    post:
      consumes:
      - application/json
      description: Send notification for payment updates
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: string
      - description: Payment Status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Send payment notification
      tags:
      - notifications
  /notifications/order/{orderId}/status:
    post:
      consumes:
      - application/json
      description: Send notification when order status changes
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: string
      - description: Order Status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Send order status notification
      tags:
      - notifications
  /orders:
    get:
      consumes:
      - application/json
      description: Get orders with pagination and filters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Order status filter
        in: query
        name: status
        type: string
      - description: Branch ID filter
        in: query
        name: branch_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new iPhone service order
      parameters:
      - description: Order data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.ServiceOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new service order
      tags:
      - orders
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: Get order details by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Get order by ID
      tags:
      - orders
  /orders/{id}/assign-courier:
    post:
      consumes:
      - application/json
      description: Assign a courier to handle pickup/delivery
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Courier ID
        in: query
        name: courier_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign courier to order
      tags:
      - orders
  /orders/{id}/assign-technician:
    post:
      consumes:
      - application/json
      description: Assign a technician to handle the order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Technician ID
        in: query
        name: technician_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign technician to order
      tags:
      - orders
  /orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Status update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.UpdateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update order status
      tags:
      - orders
  /orders/my:
    get:
      consumes:
      - application/json
      description: Get orders for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get my orders
      tags:
      - orders
  /orders/number/{orderNumber}:
    get:
      consumes:
      - application/json
      description: Get order details by order number
      parameters:
      - description: Order Number
        in: path
        name: orderNumber
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Get order by order number
      tags:
      - orders
  /payments:
    get:
      consumes:
      - application/json
      description: Get list of payments with pagination and filters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by order ID
        in: query
        name: order_id
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by payment method
        in: query
        name: payment_method
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: List payments
      tags:
      - payments
    post:
      consumes:
      - application/json
      description: Create a new payment for an order
      parameters:
      - description: Payment data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.PaymentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new payment
      tags:
      - payments
  /payments/{id}:
    get:
      consumes:
      - application/json
      description: Get payment details by ID
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Get payment by ID
      tags:
      - payments
  /payments/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of a payment
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment Status
        in: query
        name: status
        required: true
        type: string
      - description: Transaction ID
        in: query
        name: transaction_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update payment status
      tags:
      - payments
  /payments/invoice/{invoiceNumber}:
    get:
      consumes:
      - application/json
      description: Get payment details by invoice number
      parameters:
      - description: Invoice Number
        in: path
        name: invoiceNumber
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Get payment by invoice number
      tags:
      - payments
  /payments/midtrans:
    post:
      consumes:
      - application/json
      description: Process payment through Midtrans gateway
      parameters:
      - description: Midtrans payment data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/core.MidtransPaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Process Midtrans payment
      tags:
      - payments
  /payments/order/{orderId}:
    get:
      consumes:
      - application/json
      description: Get all payments for a specific order
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      summary: Get payments by order
      tags:
      - payments
  /reports/current-month:
    get:
      consumes:
      - application/json
      description: Get report for the current month
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current month report
      tags:
      - reports
  /reports/monthly:
    get:
      consumes:
      - application/json
      description: Get comprehensive monthly report for a specific month and year
      parameters:
      - default: 2024
        description: Year
        in: query
        name: year
        required: true
        type: integer
      - default: 1
        description: Month (1-12)
        in: query
        name: month
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get monthly report
      tags:
      - reports
  /reports/summary:
    get:
      consumes:
      - application/json
      description: Get summary of reports for the last 12 months
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get report summary
      tags:
      - reports
  /reports/yearly:
    get:
      consumes:
      - application/json
      description: Get comprehensive yearly report for a specific year
      parameters:
      - default: 2024
        description: Year
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get yearly report
      tags:
      - reports
  /technician/orders:
    get:
      consumes:
      - application/json
      description: Get orders assigned to technician
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/core.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/core.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get technician orders
      tags:
      - orders
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
